name: Deploy Lambda

on:
  push:
    branches:
      - main

env:
  GOOGLE_CLIENT_ID: '${{ secrets.GOOGLE_CLIENT_ID }}'
  MAIL_APP_PASSWORD: '${{ secrets.MAIL_APP_PASSWORD }}'
  AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY : ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy_test:
    name: Deploy AWS Lambda (Test Environment)
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # Create the Lambda Layer ZIP (dependencies.zip)
      - name: Install Dependencies and Package Lambda Layer
        run: |
          mkdir -p somefolder/
          mkdir -p somefolder/python
          pip install -r requirements.txt -t somefolder/python/
          cd somefolder/ && zip -r ../dependencies.zip . && cd ..
          ls somefolder/

      # Deploy Lambda Layer
      - name: Deploy Lambda Layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name sasss_backend_dependencies_test \
            --zip-file fileb://dependencies.zip \
            --compatible-runtimes python3.12 \
            --query 'LayerVersionArn' --output text)
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

      # Package the Lambda function
      - name: Package Lambda Function
        run: |
          zip -r function.zip src/ app.py

      # Deploy Lambda Function
      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name AyyappaSannidhiTestApi \
            --zip-file fileb://function.zip

      # Attach Lambda Layer to Function
      - name: Attach Lambda Layer
        run: |
          for i in {1..5}; do
            aws lambda update-function-configuration \
              --function-name AyyappaSannidhiTestApi \
              --layers ${{ env.LAYER_ARN }} && break || sleep 10
            echo "Retry $i for attaching Lambda Layer..."
          done
        timeout-minutes: 5

      - name: Configure Lambda Function
        run: |
          for i in {1..5}; do
            aws lambda update-function-configuration \
              --function-name AyyappaSannidhiTestApi \
              --handler app.handler \
              --environment "Variables={
                APP_ENV: 'test',
                SENDER_EMAIL: '${{ env.SENDER_EMAIL }}',
                TURNSTILE_URL: '${{ env.TURNSTILE_URL }}'
                JWT_ALGO: '${{ env.JWT_ALGO }}',
                JWT_EXPIRY_MIN: '${{ env.JWT_EXPIRY_MIN }}',
                GOOGLE_CLIENT_ID: '${{ env.GOOGLE_CLIENT_ID }}',
                MAIL_APP_PASSWORD: '${{ env.MAIL_APP_PASSWORD }}',
                APP_SECRET: '${{ secrets.APP_SECRET }}',
                AWS_S3_BUCKET_NAME: '${{ secrets.AWS_S3_BUCKET_NAME }}',
                ALLOWED_ORIGINS: '${{ secrets.ALLOWED_ORIGINS }}',
                TURNSTILE_SECRET_KEY: '${{ secrets.TURNSTILE_SECRET_KEY }}',
                USERS_TABLE: '${{ secrets.USERS_TABLE }}',
                TTL_TABLE: '${{ secrets.TTL_TABLE }}',
              }" && break || sleep 10
            echo "Retry $i for updating function configuration..."
          done
        timeout-minutes: 5

  deploy_prod:
    name: Deploy AWS Lambda (Production Environment)
    runs-on: ubuntu-latest
    needs: deploy_test
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # Create the Lambda Layer ZIP (dependencies.zip)
      - name: Install Dependencies and Package Lambda Layer
        run: |
          mkdir -p python
          pip install -r requirements.txt -t python/
          cd python && zip -r ../dependencies.zip . && cd ..
          ls python/

      # Deploy Lambda Layer
      - name: Deploy Lambda Layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name sasss_backend_dependencies_prod \
            --zip-file fileb://dependencies.zip \
            --compatible-runtimes python3.12 \
            --query 'LayerVersionArn' --output text)
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

      # Package the Lambda function
      - name: Package Lambda Function
        run: |
          zip -r function.zip src/ app.py

      # Deploy Lambda Function
      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name AyyappaSannidhiApi \
            --zip-file fileb://function.zip 

      # Attach Lambda Layer to Function
      - name: Attach Lambda Layer
        run: |
          for i in {1..5}; do
            aws lambda update-function-configuration \
              --function-name AyyappaSannidhiApi \
              --layers ${{ env.LAYER_ARN }} && break || sleep 10
            echo "Retry $i for attaching Lambda Layer..."
          done
        timeout-minutes: 5

      - name: Configure Lambda Function
        run: |
          for i in {1..5}; do
              aws lambda update-function-configuration \
                --function-name AyyappaSannidhiApi \
                --handler app.handler \
                --environment "Variables={
                  APP_ENV: 'production',
                SENDER_EMAIL: '${{ env.SENDER_EMAIL }}',
                TURNSTILE_URL: '${{ env.TURNSTILE_URL }}'
                JWT_ALGO: '${{ env.JWT_ALGO }}',
                JWT_EXPIRY_MIN: '${{ env.JWT_EXPIRY_MIN }}',
                GOOGLE_CLIENT_ID: '${{ env.GOOGLE_CLIENT_ID }}',
                MAIL_APP_PASSWORD: '${{ env.MAIL_APP_PASSWORD }}',
                APP_SECRET: '${{ secrets.APP_SECRET }}',
                AWS_S3_BUCKET_NAME: '${{ secrets.AWS_S3_BUCKET_NAME }}',
                ALLOWED_ORIGINS: '${{ secrets.ALLOWED_ORIGINS }}',
                TURNSTILE_SECRET_KEY: '${{ secrets.TURNSTILE_SECRET_KEY }}',
                USERS_TABLE: '${{ secrets.USERS_TABLE }}',
                TTL_TABLE: '${{ secrets.TTL_TABLE }}',
                }" && break || sleep 10
              echo "Retry $i for updating function configuration..."
            done
          timeout-minutes: 5
          